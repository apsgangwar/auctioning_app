// Test generated by RoostGPT for test aps-test using AI Type Open AI and AI Model gpt-4

package svc

import (
	"bytes"
	"database/sql"
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"strings"
	"testing"

	"demand/objects"

	"github.com/google/uuid"
)

var DB *sql.DB

func TestCreate_6c222dcebd(t *testing.T) {
	// Test case 1: Valid bidder creation
	t.Run("Valid bidder creation", func(t *testing.T) {
		bidder := objects.BidderEntity{Name: "Test Bidder"}
		bidderJSON, _ := json.Marshal(bidder)
		req, err := http.NewRequest("POST", "/create", bytes.NewBuffer(bidderJSON))
		if err != nil {
			t.Fatal(err)
		}

		rr := httptest.NewRecorder()
		handler := http.HandlerFunc(Create)

		handler.ServeHTTP(rr, req)

		if status := rr.Code; status != http.StatusOK {
			t.Errorf("handler returned wrong status code: got %v want %v",
				status, http.StatusOK)
		}

		var createdBidder objects.BidderEntity
		_ = json.NewDecoder(rr.Body).Decode(&createdBidder)
		if createdBidder.Name != "Test Bidder" || !strings.Contains(createdBidder.Id, uuid.New().String()) {
			t.Error("Created bidder does not match the input bidder")
		} else {
			t.Log("Success: Valid bidder creation")
		}
	})

	// Test case 2: Empty bidder name
	t.Run("Empty bidder name", func(t *testing.T) {
		bidder := objects.BidderEntity{Name: ""}
		bidderJSON, _ := json.Marshal(bidder)
		req, err := http.NewRequest("POST", "/create", bytes.NewBuffer(bidderJSON))
		if err != nil {
			t.Fatal(err)
		}

		rr := httptest.NewRecorder()
		handler := http.HandlerFunc(Create)

		handler.ServeHTTP(rr, req)

		if status := rr.Code; status != http.StatusBadRequest {
			t.Errorf("handler returned wrong status code: got %v want %v",
				status, http.StatusBadRequest)
		}

		if rr.Body.String() != "name shouldn't be empty" {
			t.Error("Expected error message did not match")
		} else {
			t.Log("Success: Empty bidder name")
		}
	})
}
